#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import sqlite3
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

DB_PATH = 'Backend/aggregator.db'

def migrate():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É interactions...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                project_id INTEGER NOT NULL,
                event_type TEXT NOT NULL,
                ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (project_id) REFERENCES projects(id)
            )
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_interactions_user 
            ON interactions(user_id, ts DESC)
        ''')
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_interactions_project 
            ON interactions(project_id, ts DESC)
        ''')
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_interactions_event 
            ON interactions(event_type, ts DESC)
        ''')
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ interactions —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ –ø–æ–∏—Å–∫–∞
        print("‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É search_logs...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS search_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                query TEXT NOT NULL,
                ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_search_logs_user 
            ON search_logs(user_id, ts DESC)
        ''')
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ search_logs —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫—ç—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print("‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É recommendations_cache...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS recommendations_cache (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                project_id INTEGER NOT NULL,
                score REAL NOT NULL,
                reason TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (project_id) REFERENCES projects(id),
                UNIQUE(user_id, project_id)
            )
        ''')
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_recommendations_cache_user 
            ON recommendations_cache(user_id, score DESC)
        ''')
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ recommendations_cache —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤)
        print("‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É project_metrics...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS project_metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id INTEGER NOT NULL,
                date DATE NOT NULL,
                subscribers INTEGER DEFAULT 0,
                likes INTEGER DEFAULT 0,
                impressions INTEGER DEFAULT 0,
                clicks INTEGER DEFAULT 0,
                FOREIGN KEY (project_id) REFERENCES projects(id),
                UNIQUE(project_id, date)
            )
        ''')
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_project_metrics 
            ON project_metrics(project_id, date DESC)
        ''')
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ project_metrics —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—ç—à –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        print("‚ûï –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_profiles...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_profiles (
                user_id INTEGER PRIMARY KEY,
                profile_json TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )
        ''')
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_profiles —Å–æ–∑–¥–∞–Ω–∞")
        
        conn.commit()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    migrate()


