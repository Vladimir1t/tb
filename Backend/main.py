from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import threading
import logging
import asyncio
from contextlib import asynccontextmanager
from scripts import database

from routers import projects, users, debug, recommendations
from bot import run_bot

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class IndexManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º"""
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(IndexManager, cls).__new__(cls)
            cls._instance.needs_refresh = True
            cls._instance.lock = asyncio.Lock()
        return cls._instance
    
    async def mark_refreshed(self):
        """–ü–æ–º–µ—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π"""
        async with self.lock:
            self.needs_refresh = False
            logger.info("Search index marked as refreshed")

index_manager = IndexManager()

async def refresh_search_index():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"""
    try:
        logger.info("üîÑ Forcing search index refresh...")
        
        from routers.projects import build_search_index
        from database_connect import get_db_connection
        
        conn = None
        try:
            conn = get_db_connection()
            build_search_index(conn)
            await index_manager.mark_refreshed()
            logger.info("‚úÖ Search index refreshed successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to refresh search index: {e}")
        finally:
            if conn:
                conn.close()
                
    except Exception as e:
        logger.error(f"‚ùå Error in refresh_search_index: {e}")

async def periodic_shuffle():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –ë–î —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞"""
    while True:
        try:
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –ë–î –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ 
            await asyncio.sleep(2 * 60 * 60)  
            logger.info("üîÑ Starting scheduled database shuffle...")
            
            database.shuffle_database('aggregator.db')
            logger.info("‚úÖ Database shuffle completed successfully")
            await refresh_search_index()
            
        except Exception as e:
            logger.error(f"‚ùå Error during scheduled shuffle: {e}")
            await asyncio.sleep(300)  

async def initial_setup():
    """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üöÄ Starting initial setup...")
        logger.info("üîÑ Initial database shuffle...")
        database.shuffle_database('aggregator.db')
        
        await refresh_search_index()
        
        # –°—Ç—Ä–æ–∏–º –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        logger.info("üî® Building inverted index for recommendations...")
        import recommendation_engine
        recommendation_engine.build_inverted_index()
        
        logger.info("‚úÖ Initial setup completed successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error during initial setup: {e}")
        raise

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
    """
    await initial_setup()
    
    shuffle_task = asyncio.create_task(periodic_shuffle())
    yield 
    
    shuffle_task.cancel()
    try:
        await shuffle_task
    except asyncio.CancelledError:
        logger.info("üõë Background shuffle task stopped")
    
    logger.info("üî¥ Application is shutting down.")

app = FastAPI(lifespan=lifespan)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # —Ç—É—Ç –ø–æ–º–µ–Ω—è—Ç—å –¥–ª—è —Å–µ—Ä–≤–∞–∫–∞
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ—Å—Ç–æ–π health check"""
    return {"status": "healthy", "message": "Server is running"}

app.include_router(projects.router, tags=["Projects"]) # —Ç—É—Ç –ø–æ–º–µ–Ω—è—Ç—å –¥–ª—è —Å–µ—Ä–≤–∞–∫–∞
app.include_router(users.router, tags=["Users"])       # —Ç—É—Ç –ø–æ–º–µ–Ω—è—Ç—å –¥–ª—è —Å–µ—Ä–≤–∞–∫–∞
app.include_router(debug.router, tags=["Debug"])       # —Ç—É—Ç –ø–æ–º–µ–Ω—è—Ç—å –¥–ª—è —Å–µ—Ä–≤–∞–∫–∞
app.include_router(recommendations.router, tags=["Recommendations"])

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)