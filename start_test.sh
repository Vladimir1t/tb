#!/bin/bash

echo "üß™ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."

DEBUG_USER_ID=${1:-999001}
BACKEND_PORT=8000
FRONTEND_PORT=5500

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ venv —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -d "venv" ]; then
    echo "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 -m venv venv"
    exit 1
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv
source venv/bin/activate

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

# –ï—Å–ª–∏ —Ñ–∞–π–ª –ë–î ‚Äî —ç—Ç–æ Git LFS-–ø–æ–π–Ω—Ç–µ—Ä, —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
if [ -f "Backend/aggregator.db" ]; then
    if head -n 1 Backend/aggregator.db | grep -q "git-lfs.github.com/spec/v1"; then
        echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω LFS-–ø–æ–π–Ω—Ç–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î..."
        rm -f Backend/aggregator.db
    fi
fi

# –ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, stars INTEGER DEFAULT 0, balance REAL DEFAULT 0, preferences TEXT, survey_completed INTEGER DEFAULT 0);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS tasks (user_id INTEGER, task_type TEXT, completed BOOLEAN DEFAULT 0, PRIMARY KEY (user_id, task_type));" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS projects (id INTEGER PRIMARY KEY AUTOINCREMENT, type TEXT NOT NULL, name TEXT, link TEXT NOT NULL, theme TEXT NOT NULL, is_premium BOOLEAN DEFAULT 0, likes INTEGER DEFAULT 0, subscribers INTEGER DEFAULT 0, user_id INTEGER DEFAULT 1, icon BLOB);" 2>/dev/null

# –¢–∞–±–ª–∏—Ü—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS interactions (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, project_id INTEGER NOT NULL, event_type TEXT NOT NULL, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE INDEX IF NOT EXISTS idx_interactions_user ON interactions(user_id, ts DESC);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE INDEX IF NOT EXISTS idx_interactions_project ON interactions(project_id, ts DESC);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE INDEX IF NOT EXISTS idx_interactions_event ON interactions(event_type, ts DESC);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS search_logs (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, query TEXT NOT NULL, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE INDEX IF NOT EXISTS idx_search_logs_user ON search_logs(user_id, ts DESC);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS recommendations_cache (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, project_id INTEGER NOT NULL, score REAL NOT NULL, reason TEXT, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(user_id, project_id));" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE INDEX IF NOT EXISTS idx_recommendations_cache_user ON recommendations_cache(user_id, score DESC);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS project_metrics (id INTEGER PRIMARY KEY AUTOINCREMENT, project_id INTEGER NOT NULL, date DATE NOT NULL, subscribers INTEGER DEFAULT 0, likes INTEGER DEFAULT 0, impressions INTEGER DEFAULT 0, clicks INTEGER DEFAULT 0, UNIQUE(project_id, date));" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE INDEX IF NOT EXISTS idx_project_metrics ON project_metrics(project_id, date DESC);" 2>/dev/null
sqlite3 Backend/aggregator.db "CREATE TABLE IF NOT EXISTS user_profiles (user_id INTEGER PRIMARY KEY, profile_json TEXT, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);" 2>/dev/null

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
PROJECTS_COUNT=$(sqlite3 Backend/aggregator.db "SELECT COUNT(*) FROM projects;" 2>/dev/null || echo 0)
if [ -z "$PROJECTS_COUNT" ] || [ "$PROJECTS_COUNT" = "0" ]; then
    echo "üå± –ù–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."
    sqlite3 Backend/aggregator.db "INSERT INTO projects (type,name,link,theme,is_premium,likes,subscribers,user_id,icon) VALUES
        ('channel','Tech News','https://t.me/technews','—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',0,120,35000,1,NULL),
        ('channel','Sport Daily','https://t.me/sportdaily','—Å–ø–æ—Ä—Ç',0,80,22000,1,NULL),
        ('bot','WeatherBot','https://t.me/weather_bot','–ø–æ–≥–æ–¥–∞',0,45,0,1,NULL),
        ('bot','TranslateBot','https://t.me/translate_bot','–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',0,60,0,1,NULL),
        ('mini_app','Task Tracker','https://t.me/tasktracker','–±–∏–∑–Ω–µ—Å',0,30,0,1,NULL),
        ('mini_app','Learn English','https://t.me/learnenglish','–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',0,75,0,1,NULL)
    ;" 2>/dev/null
fi

echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
echo "üß© –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π..."
bash ./run_migrations.sh >/dev/null 2>&1 || true

# –ó–∞–ø—É—Å–∫–∞–µ–º Backend –≤ —Ñ–æ–Ω–µ
echo "üîÑ –ó–∞–ø—É—Å–∫ Backend..."
cd Backend
uvicorn main:app --host 0.0.0.0 --port ${BACKEND_PORT} --reload &
BACKEND_PID=$!
cd ..

echo "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω (PID: $BACKEND_PID)"
echo "üì° API: http://localhost:${BACKEND_PORT}"
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π http —Å–µ—Ä–≤–µ—Ä –¥–ª—è Frontend
echo "üåê –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Frontend..."
cd Frontend
python3 -m http.server ${FRONTEND_PORT} >/dev/null 2>&1 &
FRONTEND_PID=$!
cd ..

echo "‚úÖ Frontend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $FRONTEND_PID)"
echo ""

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (3 —Å–µ–∫)..."
sleep 3

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Frontend c debug_user
TEST_URL="http://localhost:${FRONTEND_PORT}/index.html?debug_user=${DEBUG_USER_ID}"
echo "üåç –û—Ç–∫—Ä—ã—Ç–∏–µ Frontend –≤ –±—Ä–∞—É–∑–µ—Ä–µ (debug_user=${DEBUG_USER_ID})..."
open "${TEST_URL}"

echo ""
echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω!"
echo "   Frontend: ${TEST_URL}"
echo ""
echo "üìã –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:"
echo "   kill $BACKEND_PID"
echo "   kill $FRONTEND_PID"
