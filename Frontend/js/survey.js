// survey.js - –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–º –∏ –ø–æ–¥—Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
const SURVEY_TOPICS = {
    'IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': {
        icon: 'üíª',
        value: 'IT',
        subTopics: ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –ò–ò', 'DevOps/SRE', '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å']
    },
    '–ú–µ–¥–∏–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': {
        icon: 'üé¨',
        value: '–ú–µ–¥–∏–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        subTopics: ['–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã', '–ú—É–∑—ã–∫–∞', '–ò–≥—Ä—ã', '–ê–Ω–∏–º–µ']
    },
    '–ë–∏–∑–Ω–µ—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã': {
        icon: 'üíº',
        value: '–ë–∏–∑–Ω–µ—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã',
        subTopics: ['–ë–∏–∑–Ω–µ—Å', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']
    },
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {
        icon: 'üìö',
        value: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        subTopics: ['–ö–Ω–∏–≥–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ù–∞—É–∫–∞', '–ü–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ']
    },
    '–õ–∞–π—Ñ—Å—Ç–∞–π–ª': {
        icon: '‚ú®',
        value: '–õ–∞–π—Ñ—Å—Ç–∞–π–ª',
        subTopics: ['–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –º–æ–¥–∞', '–ó–¥–æ—Ä–æ–≤—å–µ', '–û—Ç–Ω–æ—à–µ–Ω–∏—è']
    },
    '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': {
        icon: '‚úàÔ∏è',
        value: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
        subTopics: []
    },
    '–°–ø–æ—Ä—Ç': {
        icon: '‚öΩ',
        value: '–°–ø–æ—Ä—Ç',
        subTopics: []
    },
    '–ê–≤—Ç–æ/–º–æ—Ç–æ': {
        icon: 'üöó',
        value: '–ê–≤—Ç–æ –∏ –º–æ—Ç–æ',
        subTopics: []
    },
    '–ù–∞—É–∫–∞/—Ç–µ—Ö': {
        icon: 'üî¨',
        value: '–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        subTopics: []
    },
    '–•–æ–±–±–∏/–¥–æ–º': {
        icon: 'üè°',
        value: '–•–æ–±–±–∏ –∏ –¥–æ–º',
        subTopics: ['–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–î–∏–∑–∞–π–Ω', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–ñ–∏–≤–æ—Ç–Ω—ã–µ']
    },
    '–ù–æ–≤–æ—Å—Ç–∏/–ø–æ–ª–∏—Ç–∏–∫–∞': {
        icon: 'üì∞',
        value: '–ù–æ–≤–æ—Å—Ç–∏',
        subTopics: ['–ü–æ–ª–∏—Ç–∏–∫–∞', '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ']
    },
    '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ': {
        icon: 'üåç',
        value: '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ',
        subTopics: []
    }
};

class Survey {
    constructor() {
        this.selectedMainTopics = [];
        this.selectedSubTopics = [];
        this.maxMainTopics = 7;
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.overlay = document.getElementById('surveyOverlay');
        this.screen1 = document.getElementById('surveyScreen1');
        this.screen2 = document.getElementById('surveyScreen2');
        this.mainTopicsChips = document.getElementById('mainTopicsChips');
        this.surveySubTopics = document.getElementById('surveySubTopics');
        this.selectedCount = document.getElementById('selectedCount');
        this.nextBtn = document.getElementById('surveyNextBtn');
        this.skipBtn = document.getElementById('surveySkipBtn');
        this.backBtn = document.getElementById('surveyBackBtn');
        this.completeBtn = document.getElementById('surveyCompleteBtn');
        
        this.init();
    }
    
    init() {
        this.renderMainTopics();
        this.attachEventListeners();
    }
    
    renderMainTopics() {
        this.mainTopicsChips.innerHTML = '';
        
        Object.entries(SURVEY_TOPICS).forEach(([name, data]) => {
            const chip = document.createElement('div');
            chip.className = 'survey-chip';
            chip.dataset.topic = data.value;
            chip.innerHTML = `
                <span class="survey-chip-icon">${data.icon}</span>
                <span>${name}</span>
            `;
            
            chip.addEventListener('click', () => this.toggleMainTopic(chip, data.value));
            this.mainTopicsChips.appendChild(chip);
        });
    }
    
    toggleMainTopic(chip, topic) {
        if (chip.classList.contains('selected')) {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä
            chip.classList.remove('selected');
            const index = this.selectedMainTopics.indexOf(topic);
            if (index > -1) {
                this.selectedMainTopics.splice(index, 1);
            }
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
            if (this.selectedMainTopics.length < this.maxMainTopics) {
                chip.classList.add('selected');
                this.selectedMainTopics.push(topic);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
                this.showLimitNotification();
            }
        }
        
        this.updateCounter();
        this.updateNextButton();
    }
    
    updateCounter() {
        this.selectedCount.textContent = this.selectedMainTopics.length;
    }
    
    updateNextButton() {
        // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–µ–º–∞ (–º–æ–∂–Ω–æ –∏ 0)
        this.nextBtn.disabled = false;
    }
    
    showLimitNotification() {
        // –ü—Ä–æ—Å—Ç–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.selectedCount.style.animation = 'none';
        setTimeout(() => {
            this.selectedCount.style.animation = 'shake 0.5s';
        }, 10);
    }
    
    goToScreen2() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω 2
        const topicsWithSubTopics = this.selectedMainTopics.filter(topic => {
            const topicData = Object.values(SURVEY_TOPICS).find(t => t.value === topic);
            return topicData && topicData.subTopics && topicData.subTopics.length > 0;
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω 2 —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º—ã —Å –ø–æ–¥—Ç–µ–º–∞–º–∏
        // –ò –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ–º–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è (—Å–∞–º—ã–µ —à–∏—Ä–æ–∫–∏–µ)
        if (topicsWithSubTopics.length > 0) {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ç–µ–º—ã —Å –ø–æ–¥—Ç–µ–º–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
            const topicsToRefine = topicsWithSubTopics.slice(0, 3);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω 2
            this.renderSubTopics(topicsToRefine);
            this.screen1.classList.remove('active');
            this.screen2.classList.add('active');
            this.screen2.style.display = 'block';
        } else {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Ä–∞–Ω 2 –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
            this.completeSurvey();
        }
    }
    
    renderSubTopics(topicsToShow = null) {
        this.surveySubTopics.innerHTML = '';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        const topicsToRender = topicsToShow || this.selectedMainTopics;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏ –∏–º–µ—é—Ç –ø–æ–¥—Ç–µ–º—ã
        topicsToRender.forEach(topic => {
            const topicEntry = Object.entries(SURVEY_TOPICS).find(([name, data]) => data.value === topic);
            
            if (topicEntry) {
                const [name, data] = topicEntry;
                
                if (data.subTopics && data.subTopics.length > 0) {
                    const section = document.createElement('div');
                    section.className = 'survey-section';
                    
                    const sectionHeader = document.createElement('h3');
                    sectionHeader.innerHTML = `<span>${data.icon}</span> ${name}`;
                    section.appendChild(sectionHeader);
                    
                    const chipsContainer = document.createElement('div');
                    chipsContainer.className = 'survey-section-chips';
                    
                    data.subTopics.forEach(subTopic => {
                        const chip = document.createElement('div');
                        chip.className = 'survey-chip';
                        chip.dataset.subtopic = subTopic;
                        chip.textContent = subTopic;
                        
                        chip.addEventListener('click', () => this.toggleSubTopic(chip, subTopic));
                        chipsContainer.appendChild(chip);
                    });
                    
                    section.appendChild(chipsContainer);
                    this.surveySubTopics.appendChild(section);
                }
            }
        });
    }
    
    toggleSubTopic(chip, subTopic) {
        if (chip.classList.contains('selected')) {
            chip.classList.remove('selected');
            const index = this.selectedSubTopics.indexOf(subTopic);
            if (index > -1) {
                this.selectedSubTopics.splice(index, 1);
            }
        } else {
            chip.classList.add('selected');
            this.selectedSubTopics.push(subTopic);
        }
    }
    
    goBack() {
        this.screen2.classList.remove('active');
        this.screen2.style.display = 'none';
        this.screen1.classList.add('active');
    }
    
    async completeSurvey() {
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
        const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id ?? window.DEBUG_USER_ID;
        
        if (!userId) {
            this.hide();
            return;
        }
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch(`${window.API_URL}/users/${userId}/survey`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: userId,
                    main_topics: this.selectedMainTopics,
                    sub_topics: this.selectedSubTopics
                })
            });
            
            if (response.ok) {
                this.hide();
                
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                if (typeof window.loadRecommendationsBasedOnPreferences === 'function') {
                    window.loadRecommendationsBasedOnPreferences();
                }
            } else {
                this.hide();
            }
        } catch (error) {
            this.hide();
        }
    }
    
    skip() {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        this.selectedMainTopics = [];
        this.selectedSubTopics = [];
        this.completeSurvey();
    }
    
    show() {
        this.overlay.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
    
    hide() {
        this.overlay.style.display = 'none';
        document.body.style.overflow = '';
    }
    
    attachEventListeners() {
        this.nextBtn.addEventListener('click', () => this.goToScreen2());
        this.skipBtn.addEventListener('click', () => this.skip());
        this.backBtn.addEventListener('click', () => this.goBack());
        this.completeBtn.addEventListener('click', () => this.completeSurvey());
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é shake –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ
const style = document.createElement('style');
style.textContent = `
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
        20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
`;
document.head.appendChild(style);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Survey –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.js
window.Survey = Survey;
